// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: concert.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConcertService_GetConcerts_FullMethodName    = "/pb.ConcertService/GetConcerts"
	ConcertService_BookTicket_FullMethodName     = "/pb.ConcertService/BookTicket"
	ConcertService_SearchConcerts_FullMethodName = "/pb.ConcertService/SearchConcerts"
)

// ConcertServiceClient is the client API for ConcertService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConcertServiceClient interface {
	GetConcerts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConcertList, error)
	BookTicket(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error)
	SearchConcerts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ConcertList, error)
}

type concertServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConcertServiceClient(cc grpc.ClientConnInterface) ConcertServiceClient {
	return &concertServiceClient{cc}
}

func (c *concertServiceClient) GetConcerts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ConcertList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConcertList)
	err := c.cc.Invoke(ctx, ConcertService_GetConcerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertServiceClient) BookTicket(ctx context.Context, in *BookRequest, opts ...grpc.CallOption) (*BookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BookResponse)
	err := c.cc.Invoke(ctx, ConcertService_BookTicket_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *concertServiceClient) SearchConcerts(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*ConcertList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConcertList)
	err := c.cc.Invoke(ctx, ConcertService_SearchConcerts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConcertServiceServer is the server API for ConcertService service.
// All implementations must embed UnimplementedConcertServiceServer
// for forward compatibility.
type ConcertServiceServer interface {
	GetConcerts(context.Context, *Empty) (*ConcertList, error)
	BookTicket(context.Context, *BookRequest) (*BookResponse, error)
	SearchConcerts(context.Context, *SearchRequest) (*ConcertList, error)
	mustEmbedUnimplementedConcertServiceServer()
}

// UnimplementedConcertServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConcertServiceServer struct{}

func (UnimplementedConcertServiceServer) GetConcerts(context.Context, *Empty) (*ConcertList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConcerts not implemented")
}
func (UnimplementedConcertServiceServer) BookTicket(context.Context, *BookRequest) (*BookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BookTicket not implemented")
}
func (UnimplementedConcertServiceServer) SearchConcerts(context.Context, *SearchRequest) (*ConcertList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchConcerts not implemented")
}
func (UnimplementedConcertServiceServer) mustEmbedUnimplementedConcertServiceServer() {}
func (UnimplementedConcertServiceServer) testEmbeddedByValue()                        {}

// UnsafeConcertServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConcertServiceServer will
// result in compilation errors.
type UnsafeConcertServiceServer interface {
	mustEmbedUnimplementedConcertServiceServer()
}

func RegisterConcertServiceServer(s grpc.ServiceRegistrar, srv ConcertServiceServer) {
	// If the following call pancis, it indicates UnimplementedConcertServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConcertService_ServiceDesc, srv)
}

func _ConcertService_GetConcerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).GetConcerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConcertService_GetConcerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).GetConcerts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertService_BookTicket_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).BookTicket(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConcertService_BookTicket_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).BookTicket(ctx, req.(*BookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConcertService_SearchConcerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConcertServiceServer).SearchConcerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConcertService_SearchConcerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConcertServiceServer).SearchConcerts(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConcertService_ServiceDesc is the grpc.ServiceDesc for ConcertService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConcertService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ConcertService",
	HandlerType: (*ConcertServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConcerts",
			Handler:    _ConcertService_GetConcerts_Handler,
		},
		{
			MethodName: "BookTicket",
			Handler:    _ConcertService_BookTicket_Handler,
		},
		{
			MethodName: "SearchConcerts",
			Handler:    _ConcertService_SearchConcerts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "concert.proto",
}
